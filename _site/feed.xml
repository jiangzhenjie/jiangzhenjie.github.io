<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2016-06-19T04:40:26-04:00</updated><id>/</id><title>Jboy&#39;s Tech Blog</title><subtitle>Learning and Recording</subtitle><entry><title>iOS Keychain Sharing</title><link href="/ios-keychain-services/" rel="alternate" type="text/html" title="iOS Keychain Sharing" /><published>2016-04-06T00:00:00-04:00</published><updated>2016-04-06T00:00:00-04:00</updated><id>/ios-keychain-services</id><content type="html" xml:base="/ios-keychain-services/">&lt;p&gt;在iOS系统中，通常使用钥匙串（&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain&lt;/code&gt;）存储一些敏感信息，比如密码，证书等等。每个应用程序只能访问自己的&lt;code class=&quot;highlighter-rouge&quot;&gt;Kechain&lt;/code&gt;条目。&lt;/p&gt;

&lt;h2 id=&quot;keychain-&quot;&gt;Keychain 结构&lt;/h2&gt;

&lt;p&gt;每个&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain&lt;/code&gt;包含多个&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain item&lt;/code&gt;，每个&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain item&lt;/code&gt;包含数据（data）和一系列属性（attributes）。
对于一些需要被保护的&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain item&lt;/code&gt;，比如密码或者用于加密的私钥，&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain&lt;/code&gt;会对其数据进行加密保护；
而对一些不需要被保护的数据，比如证书，&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain&lt;/code&gt;不会将其数据加密。
&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain item&lt;/code&gt;的属性(attributes)根据不同的类型item而不同，最常用的两种item的类型是：因特网密码（Internet passwords）和 通用密码（generic passwords）。
因特网密码item包含安全域名，协议类型和路径等属性。
通用密码item包含服务(service)，账户(account)等属性。通常在开发中，使用通用密码item来存储用户密码或者一些敏感的数据。&lt;/p&gt;

&lt;h2 id=&quot;keychain--1&quot;&gt;Keychain 访问&lt;/h2&gt;

&lt;p&gt;如上节所述，每个&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain item&lt;/code&gt;包含数据和一系列属性，因此访问&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain item&lt;/code&gt;是通过定义一个查询字典（query dictionary）,然后传递给系统提供的操作方法（增删改查）来完成。&lt;/p&gt;

&lt;h3 id=&quot;query-dictionary&quot;&gt;查询字典（query dictionary）&lt;/h3&gt;

&lt;p&gt;查询字典是访问&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain item&lt;/code&gt;的依据，因此对于访问&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain item&lt;/code&gt;，查询字典的构建为首要操作。&lt;/p&gt;

&lt;p&gt;通常，一个典型的查询字典包含：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个类别键值对，用于指定&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain item&lt;/code&gt;的类型。比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;kSecClass: kSecClassGenericPassword&lt;/code&gt; 指定了需要查询的item的类型为通用密码类型。&lt;/li&gt;
  &lt;li&gt;一个或多个键值对，用于指定&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain item&lt;/code&gt;满足的属性。比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;kSecAttrService: &quot;Baidu&quot;&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;kSecAttrAccount: &quot;Jboy92&quot;&lt;/code&gt; 指定了需要查询的item的服务名称是&lt;code class=&quot;highlighter-rouge&quot;&gt;Baidu&lt;/code&gt;，账户是&lt;code class=&quot;highlighter-rouge&quot;&gt;Jboy92&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;一个或多个查询键值对，用于指定进一步细化搜索。比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;kSecMatchCaseInsensitive: kCFBooleanTrue&lt;/code&gt; 指定了查询是忽略大小写的。&lt;/li&gt;
  &lt;li&gt;一个返回结果类型键值对，用于指定期望返回的结果类型。比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;kSecReturnData: kCFBooleanTrue&lt;/code&gt; 指定了需要返回item的数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不同类型的&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain item&lt;/code&gt;的属性有所不同，应该按照&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain item&lt;/code&gt;的类型来指定相应的查询属性。&lt;/p&gt;

&lt;p&gt;举个例子，假设一个场景是从&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain&lt;/code&gt;里面取出&lt;code class=&quot;highlighter-rouge&quot;&gt;Jboy92&lt;/code&gt;这个帐号登录&lt;code class=&quot;highlighter-rouge&quot;&gt;Baidu&lt;/code&gt;的密码（假设这个密码存储在&lt;code class=&quot;highlighter-rouge&quot;&gt;Baidu&lt;/code&gt;这个service下）。
如下代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var query = [String: AnyObject]()
query[kSecClass as String] = kSecClassGenericPassword
query[kSecAttrService as String] = &quot;Baidu&quot;
query[kSecAttrAccount as String] = &quot;Jboy92&quot;
query[kSecMatchCaseInsensitive as String] = kCFBooleanTrue
query[kSecReturnAttributes as String] = kCFBooleanTrue
query[kSecReturnData as String] = kCFBooleanTrue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面代码中，&lt;code class=&quot;highlighter-rouge&quot;&gt;kSecReturnAttributes&lt;/code&gt;指定了需要返回item的属性，&lt;code class=&quot;highlighter-rouge&quot;&gt;kSecReturnData&lt;/code&gt;指定了需要返回item的数据，即这里的密码。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;操作函数&lt;/h3&gt;

&lt;p&gt;对于&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain item&lt;/code&gt;的操作，系统提供了四个方法，分别是增删改查：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SecItemAdd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SecItemDelete&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SecItemUpdate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SecItemCopyMatching&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这几个方法的使用比较简单，最主要还是定义好查询字典。继续以上面的场景为例，代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func addPassword() {
    
    var query = [String: AnyObject]()
    query[kSecClass as String] = kSecClassGenericPassword
    query[kSecAttrService as String] = &quot;Baidu&quot;
    query[kSecAttrAccount as String] = &quot;Jboy92&quot;
    query[kSecValueData as String] = &quot;test_password&quot;.dataUsingEncoding(NSUTF8StringEncoding)

    let status = SecItemAdd(query, nil)
    
    if status == errSecSuccess {
        print(&quot;Add password succeed&quot;)
    } else {
        print(&quot;Add password failed&quot;)
    }
}

func deletePassword() {
    
    var query = [String: AnyObject]()
    query[kSecClass as String] = kSecClassGenericPassword
    query[kSecAttrService as String] = &quot;Baidu&quot;
    query[kSecAttrAccount as String] = &quot;Jboy92&quot;
    
    let status = SecItemDelete(query)
    
    if status == errSecSuccess {
        print(&quot;Delete password succeed&quot;)
    } else {
        print(&quot;Delete password failed&quot;);
    }
    
}

func updatePassword() {
    
    var query = [String: AnyObject]()
    query[kSecClass as String] = kSecClassGenericPassword
    query[kSecAttrService as String] = &quot;Baidu&quot;
    query[kSecAttrAccount as String] = &quot;Jboy92&quot;
    
    var updateAttrs = [String: AnyObject]()
    updateAttrs[kSecValueData as String] = &quot;update_password&quot;.dataUsingEncoding(NSUTF8StringEncoding)
    
    let status = SecItemUpdate(query, updateAttrs)
    
    if status == errSecSuccess {
        print(&quot;Add password succeed&quot;)
    } else {
        print(&quot;Add password failed&quot;)
    }
    
}

func queryPassword() {
    
    var query = [String: AnyObject]()
    query[kSecClass as String] = kSecClassGenericPassword
    query[kSecAttrService as String] = &quot;Baidu&quot;
    query[kSecAttrAccount as String] = &quot;Jboy92&quot;
    query[kSecMatchLimit as String] = kSecMatchLimitOne
    query[kSecReturnData as String] = kCFBooleanTrue
    
    var result: AnyObject?
    let status = withUnsafeMutablePointer(&amp;amp;result) {
        SecItemCopyMatching(query, UnsafeMutablePointer($0))
    }
    
    if status == errSecSuccess {
        if let result = result as? NSData {
            print(String(data: result, encoding: NSUTF8StringEncoding))
        }
    } else {
        print(&quot;No password&quot;);
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一般会封装一个工具类来处理&lt;code class=&quot;highlighter-rouge&quot;&gt;Keychain&lt;/code&gt;的操作，如&lt;a href=&quot;https://github.com/jiangzhenjie/KeychainDemo/blob/master/KeychainDemo/Keychain.swift&quot;&gt;Keychain&lt;/a&gt;或者Github上其他&lt;a href=&quot;https://github.com/search?o=desc&amp;amp;q=keychain&amp;amp;s=stars&amp;amp;type=Repositories&amp;amp;utf8=%E2%9C%93&quot;&gt;开源库&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;keychaintodo&quot;&gt;使用Keychain实现应用间共享数据(todo)&lt;/h3&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Security/Conceptual/keychainServConcepts/01introduction/introduction.html#//apple_ref/doc/uid/TP30000897-CH203-TP1&quot;&gt;Keychain Services Programming Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Security/Reference/keychainservices/index.html#//apple_ref/doc/uid/TP30000898&quot;&gt;Keychain Services Reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://opensource.apple.com/source/libsecurity_keychain/libsecurity_keychain-38259/lib/SecItem.h&quot;&gt;SecItem.h&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="iOS" /><summary>在iOS系统中，通常使用钥匙串（Keychain）存储一些敏感信息，比如密码，证书等等。每个应用程序只能访问自己的Kechain条目。</summary></entry><entry><title>Objc Block语法</title><link href="/objc-block-declare/" rel="alternate" type="text/html" title="Objc Block语法" /><published>2016-03-17T00:00:00-04:00</published><updated>2016-03-17T00:00:00-04:00</updated><id>/objc-block-declare</id><content type="html" xml:base="/objc-block-declare/">&lt;h3 id=&quot;section&quot;&gt;局部变量&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;returnType (^blockName)(parameterTypes) = ^(parameters) {...};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void (^handler)(NSString *, NSError *) = ^(NSString *string, NSError *error) {
    NSLog(@&quot;%@ %@&quot;, string, error);
};
[self testWithParams:@{@&quot;key&quot;: @&quot;value&quot;} completionHandler:handler];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;property&quot;&gt;property&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;returnType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blockName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameterTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;方法声明&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)methodWithBlock:(returnType (^)(parameters))blockName;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)testWithParams:(NSDictionary *)params completionHandler:(void(^)(NSString *string, NSError *error))handler;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;方法调用&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[obj methodWithBlock:^(parameters) {...}];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[self testWithParams:@{@&quot;key&quot;: @&quot;value&quot;} completionHandler:^(NSString *string, NSError *error) {
    NSLog(@&quot;%@ %@&quot;, string, error);
}];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;typedef&quot;&gt;typedef定义&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef returnType (^TypeName)(parameterTypes);
TypeName blockName = ^(parameters) {...};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;例子：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef void (^MyHandler)(NSString *, NSError *);
MyHandler handler = ^(NSString *string, NSError *error) {
    NSLog(@&quot;%@ %@&quot;, string, error);
};
[self testWithParams:@{@&quot;key&quot;: @&quot;value&quot;} completionHandler:handler];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://fuckingblocksyntax.com/&quot;&gt;How Do I Declare A Block in Objective-C?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="iOS ObjC" /><summary>局部变量</summary></entry><entry><title>iOS可变参数</title><link href="/ios-variable-parameters/" rel="alternate" type="text/html" title="iOS可变参数" /><published>2016-03-17T00:00:00-04:00</published><updated>2016-03-17T00:00:00-04:00</updated><id>/ios-variable-parameters</id><content type="html" xml:base="/ios-variable-parameters/">&lt;p&gt;今天在写一个可变参数方法时，遇到一些问题，故此做记录。&lt;/p&gt;

&lt;p&gt;以下面的例子说明：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (NSString *)testVariableParameters:(NSString *)param1, ... {

    NSMutableString *query = [NSMutableString string];
    if (param1) {
    
        va_list args;
        va_start(args, param1);
    
        for (NSString *arg = param1; arg != nil; arg = va_arg(args, NSString *)) {
            [query appendFormat:@&quot;%@&amp;amp;&quot;, arg];
        }
    
        [query deleteCharactersInRange:NSMakeRange(query.length - 1, 1)];
    
        va_end(args);
    }

    return query;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;调用上面的函数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[self testVariableParameters:@&quot;param1&quot;, @&quot;param2&quot;, @&quot;param3&quot;, @&quot;param4&quot;];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;会发现程序直接crash了，crash的信息是&lt;code class=&quot;highlighter-rouge&quot;&gt;EXC_BAD_ACCESS&lt;/code&gt;。
在上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;循环中打印一下取得参数的情况，会得到如下信息：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2016-03-16 23:12:50.057 Demo[1009:38552] param1
2016-03-16 23:12:50.058 Demo[1009:38552] param2
2016-03-16 23:12:50.059 Demo[1009:38552] param3
2016-03-16 23:12:50.059 Demo[1009:38552] param4
2016-03-16 23:12:50.060 Demo[1009:38552] &amp;lt;UIButton: 0x7faf0ad22230; frame = (164.5 318.5; 46 30); opaque = NO; autoresize = RM+BM; layer = &amp;lt;CALayer: 0x7faf0ad21810&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;从上面的信息可以看出，传进来的可变参数全部都取出来了，但是&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;循环并没有结束，于是出现了类似&lt;code class=&quot;highlighter-rouge&quot;&gt;越界访问&lt;/code&gt;的问题。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;那么该如何解决呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;答案是&lt;strong&gt;添加哨兵&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;如下，在参数末尾添加一个&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[self testVariableParameters:@&quot;param1&quot;, @&quot;param2&quot;, @&quot;param3&quot;, @&quot;param4&quot;, nil];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;运行，程序正常。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;那么，每次都需要调用方主动在末尾添加&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;吗？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;研究了一下&lt;code class=&quot;highlighter-rouge&quot;&gt;+[NSArray arrayWithObjects:]&lt;/code&gt;方法，发现其后面有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;NS_REQUIRES_NIL_TERMINATION&lt;/code&gt;宏，看来像是在末尾自动添加&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (instancetype)arrayWithObjects:(ObjectType)firstObj, ... NS_REQUIRES_NIL_TERMINATION;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在上面的方法后面加上&lt;code class=&quot;highlighter-rouge&quot;&gt;NS_REQUIRES_NIL_TERMINATION&lt;/code&gt;宏，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (NSString *)testVariableParameters:(NSString *)param1, ... NS_REQUIRES_NIL_TERMINATION { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后调用，发现在可变参数末尾自动补上了&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[self testVariableParameters:&amp;lt;#(NSString *), ...#&amp;gt;, nil];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;另外一个问题，在我们调用&lt;code class=&quot;highlighter-rouge&quot;&gt;+[NSString stringWithFormat:]&lt;/code&gt;方法的时候，发现可变参数末尾并没有&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;，
可是在调用&lt;code class=&quot;highlighter-rouge&quot;&gt;+[NSArray arrayWithObjects:]&lt;/code&gt;的时候，可变参数末尾就需要&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;，这是为什么？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;答案是&lt;strong&gt;当参数个数明确知道的时候，就不需要&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;，参数个数不明确知道的时候，就需要&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;作为哨兵&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+[NSString stringWithFormat:]&lt;/code&gt;在使用的时候，因为有&lt;code class=&quot;highlighter-rouge&quot;&gt;formatter&lt;/code&gt;的缘故，所以参数个数是明确的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSString * string = [NSString stringWithFormat:@&quot;%@, %@, %@&quot;, @1, @2, @3];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当然，在使用可变参数的时候，也可以将第一个参数规定为参数的个数，第一个参数以后才是真正的参数，这样也可以避免末尾加&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;。&lt;/p&gt;</content><category term="iOS" /><summary>今天在写一个可变参数方法时，遇到一些问题，故此做记录。</summary></entry></feed>
